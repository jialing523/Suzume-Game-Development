package main;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;

public class TicTacToe1 implements ActionListener{
	
	Random random = new Random();
	JFrame frame = new JFrame();
	JPanel title_panel = new JPanel();
	JPanel button_panel = new JPanel();
	JPanel button_panel2 = new JPanel();
	JPanel button_panel3 = new JPanel();
	JLabel textfield = new JLabel();
	
	JButton[] diffButtons =new JButton[3];
	JButton[] modeButtons =new JButton[2];
	JButton[] buttons = new JButton[9];
	
	boolean player_turn;
	boolean pve;
	boolean finish=false;
	boolean move=true;
	
	TicTacToe1Queue playerMove = new TicTacToe1Queue();
	TicTacToe1Queue player2Move = new TicTacToe1Queue();
	TicTacToe1Queue PCMove = new TicTacToe1Queue();
	
	int depth, gameStatus=-1;
	
	
    TicTacToe1(){
    	// set up frame for choosing mode
    	//frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(800,800);
		frame.getContentPane().setBackground(new Color(50,50,50));
		frame.setLayout(new BorderLayout());
		frame.setVisible(true);
                frame.setLocationRelativeTo(null);
		
		// set up textfield and title panel
		textfield.setBackground(new Color(25,25,25));
		textfield.setForeground(new Color(25,255,0));
		textfield.setFont(new Font("Ink Free",Font.BOLD,75));
		textfield.setHorizontalAlignment(JLabel.CENTER);
		textfield.setText("Tic-Tac-Toe");
		textfield.setOpaque(true);
		
		title_panel.setLayout(new BorderLayout());
		title_panel.setBounds(0,0,800,100);
		
		displayGameIntroduction();
		
		// set up button panel and button for mode
		button_panel3.setLayout(new GridLayout(2,1));
		
		for(int i=0;i<2;i++) {
			modeButtons[i] = new JButton();
			button_panel3.add(modeButtons[i]);
			modeButtons[i].setFont(new Font("MV Boli",Font.BOLD,120));
			modeButtons[i].setFocusable(false);
			
		}
		modeButtons[0].setText("PvE");
		modeButtons[1].setText("PvP");
		
		
		// complete the frame
		textfield.setText("Tic-Tac-Toe");
		title_panel.add(textfield);
		frame.add(title_panel,BorderLayout.NORTH);
		frame.add(button_panel3);
		
		// add ActionListener to the modeButtons
		modeButtons[0].addActionListener(
				new ActionListener() {
				    public void actionPerformed(ActionEvent e) {
				    	pve=true;
				    	chooseMode();
				    }
				}
			);
		modeButtons[1].addActionListener(
				new ActionListener() {
				    public void actionPerformed(ActionEvent e) {
				    	pve=false;
				    	frame.remove(button_panel3);
				    	gameScreen();
				    	firstTurn();
				    }
				}
			);
		
		
    }
    private static void displayGameIntroduction() {
        String text = "Three Mark Tic-Tac-Toe\n\n" +
                "A regular game of TTT in a 3x3 square, but only maximum of three O's and three X's would stay on the grid."
                + "For example, the fourth O or X will be continue placing in the grid, but the first placing O or X will be removed. ";
        

        JFrame frame = new JFrame("Game Introduction");
        frame.setSize(400, 300);

        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JTextArea textArea = new JTextArea(text);
        textArea.setEditable(false);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        panel.add(textArea, BorderLayout.CENTER);

        JButton closeButton = new JButton("Close");
        closeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                frame.dispose(); // Close the frame when the Close button is clicked
            }
        });
        panel.add(closeButton, BorderLayout.SOUTH);

        frame.setContentPane(panel);
        frame.setLocationRelativeTo(null); // Center the frame on the screen
        frame.setVisible(true);

        
    }
    
    // start game
    public void game(int depth){
	    	gameScreen();
	        firstTurn();
	       if(!player_turn) {
	    	   AiTurn(depth);
	       }
    	
    	 
    	
    } 
    // tictactoe screen
    public void gameScreen() {
			frame.remove(button_panel);
		    button_panel2.setLayout(new GridLayout(3,3));	
		  for(int i=0;i<9;i++) {
			   buttons[i] = new JButton();
			   button_panel2.add(buttons[i]);
			   buttons[i].setFont(new Font("MV Boli",Font.BOLD,120));
			   buttons[i].setFocusable(false);
			   buttons[i].addActionListener(this);
		  }
		  frame.add(button_panel2);
		 
	}
    
    // choose the difficulty of the game
    public void chooseMode() {
    	
    	   frame.remove(button_panel3);
    	   
    	  // set up button panel and button for mode
		   button_panel.setLayout(new GridLayout(3,1));
				
				for(int i=0;i<3;i++) {
					diffButtons[i] = new JButton();
					button_panel.add(diffButtons[i]);
					diffButtons[i].setFont(new Font("MV Boli",Font.BOLD,120));
					diffButtons[i].setFocusable(false);
					
				}
				diffButtons[0].setText("Easy");
				diffButtons[1].setText("Normal");
				diffButtons[2].setText("Hard");
				
				// complete the frame
				textfield.setText("Choose difficulty");
				title_panel.add(textfield);
				frame.add(title_panel,BorderLayout.NORTH);
				frame.add(button_panel);
				
				
				// add ActionListener to the diffButtons
				
				diffButtons[0].addActionListener(
				new ActionListener() {
				    public void actionPerformed(ActionEvent e) {
				    	depth=1;
				    	game(depth);
				    }
				}
	     	);
				diffButtons[1].addActionListener(
				new ActionListener() {
				    public void actionPerformed(ActionEvent e) {	
				        depth=2;
				    	game(depth);
				    }
				}
			);
				diffButtons[2].addActionListener(
				new ActionListener() {
				    public void actionPerformed(ActionEvent e) {	
				    	depth=6;
				    	game(depth);
				    }
				}
			);
		
		
		
       }
    
    public void actionPerformed(ActionEvent e) {
	    	if(player_turn) {
	    	     for(int i=0;i<9;i++) {
				     if(e.getSource()==buttons[i]) {
						if(buttons[i].getText()=="") {
							queueup(playerMove,i);
							buttons[i].setForeground(new Color(0,0,255));
							buttons[i].setText("O");
							player_turn=false;
							textfield.setText("X turn");
							move=true;
							win(checkWin());
							if(!finish) {
							  if(pve) {
							   AiTurn(depth);
							  }
							}
						}
					}
				}			
			}
	    	else {
	    		for(int i=0;i<9;i++) {
				     if(e.getSource()==buttons[i]) {
						if(buttons[i].getText()=="") {
							queueup(player2Move,i);
							buttons[i].setForeground(new Color(255,0,0));
							buttons[i].setText("X");
							player_turn=true;
							textfield.setText("O turn");
							move=true;
							win(checkWin());
							
						}
					}
				}		
	    	}
    }
    
    //AI move
    public void AiTurn(int depth) {
	    	
         	//AI turn
         	move=false;
         	int bestscore=Integer.MAX_VALUE;
         	int index=0;
     		for(int i=0;i<9;i++) {
     			if(buttons[i].getText()=="") {
     				int get=queueup(PCMove,i);
     				buttons[i].setText("X");
     				int score=minimax(depth-1,true,playerMove,PCMove);
 	    				if(unqueue(PCMove,get)) {
 	    					buttons[get].setText("X");
 	    				}
     				buttons[i].setText("");
     				if (score < bestscore) {
     			          bestscore = score;
     			          index=i;
     			        }
     			}
     		}
     		
     		queueup(PCMove,index);
 			buttons[index].setForeground(new Color(255,0,0));
 			buttons[index].setText("X");
 			player_turn=true;
 			textfield.setText("Your turn");
 			move=true;
 			win(checkWin());
 			
    }
    //add move to the queue
    public int queueup(TicTacToe1Queue queue,int i) {
	    	int get=-1;
	    	if(queue.isFull()) {
	    		get=queue.dequeue();
				buttons[get].setText("");
				queue.enqueue(i);
			}else {
				queue.enqueue(i);
			}
	    	return get;
    }
    
    //undo the queueup() method
    public boolean unqueue(TicTacToe1Queue queue,int i) {
	    	if(i!=-1){
	    		queue.readd(i);
	    		queue.remove();
	    		return true;
	    	}else {
	    		queue.remove();
	    		return false;
	    	}
    }
    
    //minimax algorithm
    
    public int minimax(int depth,boolean isMaximizing,TicTacToe1Queue currPlayerMove,TicTacToe1Queue currPCMove) {
	    	move=false;
	    	TicTacToe1Queue nowPlayerMove=currPlayerMove;
	    	TicTacToe1Queue nowPCMove=currPCMove;
	    	
	    
	    	int result=checkWin();
	    	if(result!=0){
	    		return result;
	    	}
	    	
	    	if(isMaximizing) {
	    		int bestscore=Integer.MIN_VALUE;
	    		for(int i=0;i<9;i++) {
	    			if(buttons[i].getText()=="") {
	    				if(depth!=0) {
	    				int get=queueup(nowPlayerMove,i);
	    				buttons[i].setText("O");
	    				int score=minimax(depth-1,false,nowPlayerMove,nowPCMove);
		    				if(unqueue(nowPlayerMove,get)) {
		    					buttons[get].setText("O");
		    				}
	    				buttons[i].setText("");
	    				bestscore=Math.max(score,bestscore);
	    				}
	    				else {
	    					bestscore=Math.max(0,bestscore);
	    				}
	    			}
	    		}
	    		return bestscore;
	    	}else {
	    		int bestscore=Integer.MAX_VALUE;
	    		for(int i=0;i<9;i++) {
	    			if(buttons[i].getText()=="") {
	    				if(depth!=0) {
	    				int get=queueup(nowPCMove,i);
	    				buttons[i].setText("X");
	    				int score=minimax(depth-1,true,nowPlayerMove,nowPCMove);
		    				if(unqueue(nowPCMove,get)) {
		    					buttons[get].setText("X");
		    				}
	    				buttons[i].setText("");
	    				bestscore=Math.min(score,bestscore);
	    				}
	    				else {
	    					bestscore=Math.min(0,bestscore);
	    				}
	    			}
	    		}
	    		return bestscore;
	    	}
    	
    }
    
    
    
    //determine who play the first move
    public void firstTurn() {
    	
		if(random.nextInt(2)==0) {
			player_turn=true;
			if(pve) {
				textfield.setText("Your turn");
			}else {
			textfield.setText("O turn");
			}
		}
		else {
			player_turn=false;
			textfield.setText("X turn");
		}
	}
    
    //finish the game when win
	public void win(int j) {
		if(j==1) {
			for(int i=0;i<9;i++) {
				buttons[i].setEnabled(false);
			}
		  if(pve) {
			textfield.setText("You wins");
                        gameStatus=1;
		  }else {
			  textfield.setText("O wins");
                          gameStatus=1;
		  }
			finish=true;
                        frame.dispose();
		}
		else if(j==-1) {
			for(int i=0;i<9;i++) {
				buttons[i].setEnabled(false);
			}
			 if(pve) {
					textfield.setText("You lose");
                                        gameStatus=0;
				  }else {
					  textfield.setText("X wins");
                                          gameStatus=0;
				  }
			finish=true;
                        frame.dispose();
		}
	}

	//Win condition
	public int checkWin() {
		//check X win conditions
		if(
				(buttons[0].getText()=="X") &&
				(buttons[1].getText()=="X") &&
				(buttons[2].getText()=="X")
				) {
			
			
			return -1;
		}
		if(
				(buttons[3].getText()=="X") &&
				(buttons[4].getText()=="X") &&
				(buttons[5].getText()=="X")
				) {
			
			return -1;
		}
		if(
				(buttons[6].getText()=="X") &&
				(buttons[7].getText()=="X") &&
				(buttons[8].getText()=="X")
				) {
			
			return -1;
		}
		if(
				(buttons[0].getText()=="X") &&
				(buttons[3].getText()=="X") &&
				(buttons[6].getText()=="X")
				) {
			
			return -1;
		}
		if(
				(buttons[1].getText()=="X") &&
				(buttons[4].getText()=="X") &&
				(buttons[7].getText()=="X")
				) {
			
			return -1;
		}
		if(
				(buttons[2].getText()=="X") &&
				(buttons[5].getText()=="X") &&
				(buttons[8].getText()=="X")
				) {
			
			return -1;
		}
		if(
				(buttons[0].getText()=="X") &&
				(buttons[4].getText()=="X") &&
				(buttons[8].getText()=="X")
				) {
			
			return -1;
		}
		if(
				(buttons[2].getText()=="X") &&
				(buttons[4].getText()=="X") &&
				(buttons[6].getText()=="X")
				) {
			
			return -1;
		}
		//check O win conditions
		if(
				(buttons[0].getText()=="O") &&
				(buttons[1].getText()=="O") &&
				(buttons[2].getText()=="O")
				) {
			
			return 1;
		}
		if(
				(buttons[3].getText()=="O") &&
				(buttons[4].getText()=="O") &&
				(buttons[5].getText()=="O")
				) {
			
			return 1;
		}
		if(
				(buttons[6].getText()=="O") &&
				(buttons[7].getText()=="O") &&
				(buttons[8].getText()=="O")
				) {
			
			return 1;
		}
		if(
				(buttons[0].getText()=="O") &&
				(buttons[3].getText()=="O") &&
				(buttons[6].getText()=="O")
				) {
			
			return 1;
		}
		if(
				(buttons[1].getText()=="O") &&
				(buttons[4].getText()=="O") &&
				(buttons[7].getText()=="O")
				) {
			
			return 1;
		}
		if(
				(buttons[2].getText()=="O") &&
				(buttons[5].getText()=="O") &&
				(buttons[8].getText()=="O")
				) {
			
			return 1;
		}
		if(
				(buttons[0].getText()=="O") &&
				(buttons[4].getText()=="O") &&
				(buttons[8].getText()=="O")
				) {
			
			return 1;
		}
		if(
				(buttons[2].getText()=="O") &&
				(buttons[4].getText()=="O") &&
				(buttons[6].getText()=="O")
				) {
			
			return 1;
		}  
		else {
			return 0;
		}
	}
        
        public static void main (String [] args)
        {
            TicTacToe1 ttt1 = new TicTacToe1();
        }
}
